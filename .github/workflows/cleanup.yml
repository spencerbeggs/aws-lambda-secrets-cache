name: "Initilize GitFlow Release"
on:
  push:
    branches:
      - "release/[0-9]+.[0-9]+.[0-9]+"
      - "hotfix/[0-9]+.[0-9]+.[0-9]+"
jobs:
  cleanup:
    name: Clean up release
    runs-on: ubuntu-latest
    if: github.event.deleted
    steps:
      - name: Get metadata
        id: meta
        run: |
          RELEASE_TAG=$(echo "${{ github.event.ref }}" | awk -F / '{print $4}')
          RELEASE_TYPE=$(echo "${{ github.event.ref }}" | awk -F / '{print $3}')
          echo ::set-output name=release_type::"$RELEASE_TYPE"
          echo ::set-output name=main_pr::"$RELEASE_TYPE/$RELEASE_TAG"
          echo ::set-output name=canary_pr::"canary/$RELEASE_TAG"
          echo ::set-output name=tag_name::"$RELEASE_TAG"
          echo ::set-output name=beta_tag_name::"$RELEASE_TAG-beta"
          echo ::set-output name=release_name::"v$RELEASE_TAG"
      - name: Get beta tag
        id: beta_tag
        uses: octokit/graphql-action@v2.x
        env:
          GITHUB_TOKEN: ${{ secrets.GHP_TOKEN }}
        with:
          query: |
            query GetBetaRelease($owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                ref(qualifiedName: "2.0.0-beta") {
                  id
                }
              }
            }
          owner: ${{ github.event.repository.owner.name }}
          repo: ${{ github.event.repository.name }}
      - name: Delete beta tag
        uses: octokit/graphql-action@v2.x
        if: fromJson(steps.beta_tag.outputs.data).data.repository.ref.id
        env:
          GITHUB_TOKEN: ${{ secrets.GHP_TOKEN }}
        with:
          query: |
            mutation DeleteBetaTag($tagId: String!) {
              deleteRef(input: {refId: $tagId}) {
                clientMutationId
              }
            }
          tagId: ${{ fromJson(steps.beta_tag.outputs.data).data.repository.ref.id }}
